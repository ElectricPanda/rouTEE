// Enclave.edl - Top EDL file: contains the enclave interface (list of ecalls and ocalls)

enclave {

    // @ Luke Park
    from "sgx_tstdc.edl" import sgx_thread_wait_untrusted_event_ocall, sgx_thread_set_untrusted_event_ocall, sgx_thread_setwait_untrusted_events_ocall, sgx_thread_set_multiple_untrusted_events_ocall;

    trusted {
        // define ECALLs here
        
        public int ecall_set_routing_fee(unsigned long long fee);
        public int ecall_set_routing_fee_address([in, size=fee_addr_len] const char* fee_address, int fee_addr_len);
        public int ecall_settle_routing_fee(unsigned long long amount);
        public void ecall_print_state();
        public int ecall_make_settle_transaction([user_check] const char* settle_transaction, [in, out] int* settle_tx_len);
        public int ecall_secure_command([in, size=sessionID_len] const char* sessionID, int sessionID_len, [in, size=encrypted_cmd_len] const char* encrypted_cmd, int encrypted_cmd_len, [user_check] char* encrypted_response, [in, out] int* encrypted_response_len);
        public int ecall_make_owner_key([user_check] char* sealed_owner_private_key, [in, out] int* sealed_key_len);
        public int ecall_load_owner_key([in, size=sealed_key_len] const char* sealed_owner_private_key, int sealed_key_len);
        public int ecall_seal_state([user_check] char* sealed_state, [in, out] int* sealed_state_len);
        public int ecall_load_state([in, size=sealed_state_len] const char* sealed_state, int sealed_state_len);

        // debugging functions (temp ecall functions)
        public void deal_with_deposit_tx([in, size=sender_addr_len] const char* sender_address, int sender_addr_len, unsigned long long amount, unsigned long long block_number);
        public void deal_with_settlement_tx();
    };

    untrusted{
        // define OCALLs here

        // invoke OCall to display string buffer inside the enclave
        // [in]: copy the string buffer to App outside
        // [string]: specifies 'str' is a NULL terminated buffer
        void ocall_print_string([in, string] const char* str);
    };

};
